import intf_libs  = libboost-algorithm%lib{boost_algorithm}
import intf_libs += libboost-any%lib{boost_any}
import intf_libs += libboost-array%lib{boost_array}
import intf_libs += libboost-assert%lib{boost_assert}
import intf_libs += libboost-concept-check%lib{boost_concept_check}
import intf_libs += libboost-config%lib{boost_config}
import intf_libs += libboost-container%lib{boost_container}
import intf_libs += libboost-core%lib{boost_core}
import intf_libs += libboost-function-types%lib{boost_function_types}
import intf_libs += libboost-fusion%lib{boost_fusion}
import intf_libs += libboost-integer%lib{boost_integer}
import intf_libs += libboost-iterator%lib{boost_iterator}
import intf_libs += libboost-lexical-cast%lib{boost_lexical_cast}
import intf_libs += libboost-math%lib{boost_math}
import intf_libs += libboost-move%lib{boost_move}
import intf_libs += libboost-mpl%lib{boost_mpl}
import intf_libs += libboost-multiprecision%lib{boost_multiprecision}
import intf_libs += libboost-numeric-conversion%lib{boost_numeric_conversion}
import intf_libs += libboost-polygon%lib{boost_polygon}
import intf_libs += libboost-qvm%lib{boost_qvm}
import intf_libs += libboost-range%lib{boost_range}
import intf_libs += libboost-rational%lib{boost_rational}
import intf_libs += libboost-serialization%lib{boost_serialization}
import intf_libs += libboost-smart-ptr%lib{boost_smart_ptr}
import intf_libs += libboost-static-assert%lib{boost_static_assert}
import intf_libs += libboost-thread%lib{boost_thread}
import intf_libs += libboost-throw-exception%lib{boost_throw_exception}
import intf_libs += libboost-tokenizer%lib{boost_tokenizer}
import intf_libs += libboost-tuple%lib{boost_tuple}
import intf_libs += libboost-type-traits%lib{boost_type_traits}
import intf_libs += libboost-utility%lib{boost_utility}
import intf_libs += libboost-variant%lib{boost_variant}
import intf_libs += libboost-variant2%lib{boost_variant2}

intf_libs = $cxx.deduplicate_export_libs($intf_libs)

lib{boost_geometry}: {hxx ixx txx}{**} $intf_libs

# Export options.
#
out_pfx = [dir_path] $out_root/include/
src_pfx = [dir_path] $src_root/include/

lib{boost_geometry}:
{
  cxx.export.poptions = "-I$out_pfx" "-I$src_pfx"
  cxx.export.libs = $intf_libs
}

# Install into the boost/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/boost/
  install.subdirs = true
}
