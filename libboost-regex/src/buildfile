import intf_libs  = libicuuc%lib{icuuc}
import intf_libs += libicui18n%lib{icui18n}
import intf_libs += libboost-assert%lib{boost_assert}
import intf_libs += libboost-concept-check%lib{boost_concept_check}
import intf_libs += libboost-config%lib{boost_config}
import intf_libs += libboost-container-hash%lib{boost_container_hash}
import intf_libs += libboost-core%lib{boost_core}
import intf_libs += libboost-integer%lib{boost_integer}
import intf_libs += libboost-iterator%lib{boost_iterator}
import intf_libs += libboost-mpl%lib{boost_mpl}
import intf_libs += libboost-predef%lib{boost_predef}
import intf_libs += libboost-smart-ptr%lib{boost_smart_ptr}
import intf_libs += libboost-static-assert%lib{boost_static_assert}
import intf_libs += libboost-throw-exception%lib{boost_throw_exception}
import intf_libs += libboost-type-traits%lib{boost_type_traits}
impl_libs = # Implementation dependencies.

# Public headers.
#
pub = [dir_path] ../include/boost/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{boost_regex}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
#
lib{boost_regex}: {hxx ixx txx h cxx c}{**} $impl_libs $intf_libs

# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

cc.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
               "-I$out_pfx_inc" "-I$src_pfx_inc"

# BEGIN MANUAL CUSTOMIZATION
#

# BOOST_HAS_ICU must be defined because we're linking against ICU.
#
# Note that this macro is specific to Boost.Regex and therefore violates the
# convention of prefixing library-specific macros with `BOOST_<lib>_`.
#
{hbmi obj}{*}: cc.poptions += -DBOOST_HAS_ICU

#
# END MANUAL CUSTOMIZATION

{hbmia obja}{*}: cc.poptions += -DBOOST_REGEX_STATIC_LINK
{hbmis objs}{*}: cc.poptions += -DBOOST_REGEX_DYN_LINK

# Export options.
#
lib{boost_regex}:
{
  cc.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc" \
                         -DBOOST_REGEX_NO_LIB
  cc.export.libs = $intf_libs
}

liba{boost_regex}: cc.export.poptions += -DBOOST_REGEX_STATIC_LINK
libs{boost_regex}: cc.export.poptions += -DBOOST_REGEX_DYN_LINK

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{boost_regex}: bin.lib.version = @"-$version.project_id"
else
  lib{boost_regex}: bin.lib.version = @"-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx h}{*}: install = false
